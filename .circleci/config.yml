version: 2

workflows:
  version: 2
  kubeapps:
    jobs:
      - test_go:
          filters:
            tags:
              only: /^v.*/
      - test_dashboard:
          filters:
            tags:
              only: /^v.*/
      - build_chartrepo:
          requires:
            - test_go
          filters:
            tags:
              only: /^v.*/
      - build_chartsvc:
          requires:
            - test_go
          filters:
            tags:
              only: /^v.*/
      - build_chart_apprepository:
          requires:
            - test_go
          filters:
            tags:
              only: /^v.*/
      - build_dashboard:
          requires:
            - test_dashboard
          filters:
            tags:
              only: /^v.*/
      - build_tiller_proxy:
          requires:
            - test_go
          filters:
            tags:
              only: /^v.*/
      - GKE_1_9:
          requires:
            - build_chartrepo
            - build_chartsvc
            - build_chart_apprepository
            - build_dashboard
            - build_tiller_proxy
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
      - GKE_1_10:
          requires:
            - build_chartrepo
            - build_chartsvc
            - build_chart_apprepository
            - build_dashboard
            - build_tiller_proxy
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
      - release:
          requires:
            - GKE_1_9
            - GKE_1_10
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master

## Definitions
install_gcloud_sdk: &install_gcloud_sdk
  run: |
    echo "export PATH=$PATH:${HOME}/google-cloud-sdk/bin" >> $BASH_ENV
    echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
    if [ ! -d ${HOME}/google-cloud-sdk/bin ]; then
      rm -rf $HOME/google-cloud-sdk;
      curl https://sdk.cloud.google.com | bash;
    fi
exports: &exports
  run: |
    # It is not possible to resolve env vars in the environment section:
    # https://circleci.com/docs/2.0/env-vars/#using-bash_env-to-set-environment-variables
    echo "export VERSION=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
build_image: &build_image
  machine: true
  working_directory: /home/circleci/.go_workspace/src/github.com/kubeapps/kubeapps
  environment:
    GOPATH: /home/circleci/.go_workspace
  steps:
    - checkout
    - <<: *exports
    - run: make VERSION="$VERSION" $IMAGE
    - run: |
        if [[ -z "$CIRCLE_PULL_REQUEST" ]]; then
          docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
          if [[ -n "$CIRCLE_TAG" ]]; then 
            docker push $IMAGE:$VERSION
          fi
          if [[ "$CIRCLE_BRANCH" == "master"  ]]; then
            docker tag $IMAGE:$VERSION $IMAGE:latest
            docker push $IMAGE:latest
          fi
        fi
gke_test: &gke_test
  docker:
    - image: circleci/golang:1.9
  steps:
    - run: |
        # In case of GKE we will only want to build if it is
        # a build of a branch in the kubeapps repository
        if [[ -z "$GKE_ADMIN" || -n "$CIRCLE_PULL_REQUESTS" ]]; then
          circleci step halt
        fi
    - checkout
    - <<: *exports
    - <<: *install_gcloud_sdk
    # Install kubectl
    - run: gcloud components install kubectl
    - setup_remote_docker
    - run: |
        gcloud -q config set project $GKE_PROJECT
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/client_secrets.json
        echo $GCLOUD_KEY > $GOOGLE_APPLICATION_CREDENTIALS
        if [ -a $GOOGLE_APPLICATION_CREDENTIALS ]; then
          gcloud -q auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS;
        fi
    # A GKE cluster name cannot contain non-alphanumeric characters (nor uppercase letters)
    - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-${CIRCLE_BRANCH:-$CIRCLE_TAG}-${GKE_BRANCH}-ci | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
    - run: ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $GKE_ZONE $GKE_BRANCH $GKE_ADMIN > /dev/null
    # Install helm
    - run: |
        wget https://storage.googleapis.com/kubernetes-helm/helm-$HELM_VERSION-linux-amd64.tar.gz
        tar zxf helm-$HELM_VERSION-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/
        helm init
    - run: ./script/e2e-test.sh
    - run:
        name: Cleanup GKE Cluster
        command: gcloud container clusters delete --async --zone $GKE_ZONE $ESCAPED_GKE_CLUSTER
        when: always
###

jobs:
  test_go:
    working_directory: /go/src/github.com/kubeapps/kubeapps
    environment:
      CGO_ENABLED: "0"
    docker:
      - image: circleci/golang:1.9
    steps:
      - checkout
      - <<: *exports
      - run: make test
  test_dashboard:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: yarn install --cwd=dashboard --frozen-lockfile
      - run: yarn --cwd=dashboard run lint
      - run: yarn --cwd=dashboard run test --maxWorkers=4 --coverage
  build_chartrepo:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/chart-repo
  build_chartsvc:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/chartsvc
  build_chart_apprepository:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/apprepository-controller
  build_dashboard:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/dashboard
  build_tiller_proxy:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/tiller-proxy
  release:
    docker:
      - image: circleci/golang:1.9
    steps:
      - checkout
      - run: |
          if [[ -n "$CIRCLE_TAG" ]]; then
            REPO_DOMAIN=kubeapps REPO_NAME=kubeapps ./script/create_release.sh ${CIRCLE_TAG}
          fi
  GKE_1_9:
    <<: *gke_test
    environment:
      HELM_VERSION: v2.9.1
      GKE_BRANCH: 1.9
  GKE_1_10:
    <<: *gke_test
    environment:
      HELM_VERSION: v2.9.1
      GKE_BRANCH: 1.10
