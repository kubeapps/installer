// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when all the components are loaded shows a deprovision error if it exists 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={true}
    >
      <ErrorSelector
        action="deprovision"
        defaultRequiredRBACRoles={
          Object {
            "delete": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "servicebindings",
                "verbs": Array [
                  "delete",
                ],
              },
            ],
            "deprovision": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "serviceinstances",
                "verbs": Array [
                  "delete",
                ],
              },
            ],
            "list": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "clusterWide": true,
                "resource": "clusterserviceclasses",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "serviceinstances",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "servicebindings",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "clusterWide": true,
                "resource": "clusterserviceplans",
                "verbs": Array [
                  "list",
                ],
              },
            ],
          }
        }
        error={[Error]}
        resource="Instance my-instance"
      />
    </LoadingWrapper>
  </main>
</div>
`;

exports[`when all the components are loaded shows a fetch error if it exists 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={true}
    >
      <ErrorSelector
        action="list"
        defaultRequiredRBACRoles={
          Object {
            "delete": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "servicebindings",
                "verbs": Array [
                  "delete",
                ],
              },
            ],
            "deprovision": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "serviceinstances",
                "verbs": Array [
                  "delete",
                ],
              },
            ],
            "list": Array [
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "clusterWide": true,
                "resource": "clusterserviceclasses",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "serviceinstances",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "resource": "servicebindings",
                "verbs": Array [
                  "list",
                ],
              },
              Object {
                "apiGroup": "servicecatalog.k8s.io",
                "clusterWide": true,
                "resource": "clusterserviceplans",
                "verbs": Array [
                  "list",
                ],
              },
            ],
          }
        }
        error={[Error]}
        resource="Instance my-instance"
      />
    </LoadingWrapper>
  </main>
</div>
`;

exports[`when all the components are loaded when an instance is available should show class and plan info if it exists 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={true}
    >
      <div
        className="found"
      >
        <h2>
          About
        </h2>
        <div>
          <div>
            <div>
              <h3>
                Status
              </h3>
              <table>
                <thead>
                  <tr>
                    <th>
                      Type
                    </th>
                    <th>
                      Status
                    </th>
                    <th>
                      Last Transition Time
                    </th>
                    <th>
                      Reason
                    </th>
                    <th>
                      Message
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr
                    key="1"
                  >
                    <td>
                      a type
                    </td>
                    <td>
                      good
                    </td>
                    <td>
                      1
                    </td>
                    <td>
                      <code>
                        none
                      </code>
                    </td>
                    <td>
                      everything okay here
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <DeprovisionButton
          deprovision={[MockFunction]}
          instance={
            Object {
              "metadata": Object {
                "creationTimestamp": "",
                "finalizers": Array [],
                "generation": 1,
                "name": "my-instance",
                "namespace": "default",
                "resourceVersion": "",
                "selfLink": "",
                "uid": "",
              },
              "spec": Object {
                "clusterServiceClassExternalName": "my-instance",
                "clusterServiceClassRef": Object {
                  "name": "my-instance",
                },
                "clusterServicePlanExternalName": "my-instance",
                "clusterServicePlanRef": Object {
                  "name": "my-instance",
                },
                "externalID": "my-instance",
              },
              "status": Object {
                "conditions": Array [
                  Object {
                    "lastTransitionTime": "1",
                    "message": "everything okay here",
                    "reason": "none",
                    "status": "good",
                    "type": "a type",
                  },
                ],
              },
            }
          }
        />
        <h3>
          Spec
        </h3>
        <CardGrid>
          <Card
            key="class-my-instance"
            responsive={true}
            responsiveColumns={2}
          >
            <CardIcon
              icon="img.png"
            />
            <CardContent>
              <h5 />
              <p
                className="margin-b-reset"
              />
            </CardContent>
          </Card>
          <Card
            key="plan-my-instance"
            responsive={true}
            responsiveColumns={2}
          >
            <CardContent>
              <h5>
                my-instance
              </h5>
              <p
                className="type-small margin-reset margin-b-big type-color-light-blue"
              >
                <span>
                  Free âœ“
                </span>
              </p>
              <div>
                <ul>
                  <li
                    key="this is a plan"
                  >
                    this is a plan
                  </li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </CardGrid>
        <h2>
          Bindings
        </h2>
        <AddBindingButton
          addBinding={[MockFunction]}
          instanceRefName="my-instance"
          namespace="default"
          onAddBinding={[Function]}
        />
        <br />
        <BindingList
          bindingsWithSecrets={Array []}
          removeBinding={[MockFunction]}
        />
      </div>
    </LoadingWrapper>
  </main>
</div>
`;

exports[`when all the components are loaded when an instance is available should show the available bindings 1`] = `
<ServiceInstanceView
  addBinding={[MockFunction]}
  bindingsWithSecrets={
    Object {
      "isFetching": false,
      "list": Array [
        Object {
          "binding": Object {
            "metadata": Object {
              "name": "my-instance",
              "namespace": "default",
              "uid": "binding-my-instance",
            },
            "spec": Object {
              "instanceRef": Object {
                "name": "my-instance",
              },
            },
            "status": Object {
              "conditions": Array [
                Object {
                  "message": "binding is okay",
                },
              ],
            },
          },
        },
      ],
    }
  }
  classes={
    Object {
      "isFetching": false,
      "list": Array [],
    }
  }
  deprovision={[MockFunction]}
  errors={Object {}}
  getBindings={
    [MockFunction] {
      "calls": Array [
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
      ],
    }
  }
  getClasses={
    [MockFunction] {
      "calls": Array [
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
      ],
    }
  }
  getInstances={
    [MockFunction] {
      "calls": Array [
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
        Array [
          "default",
        ],
      ],
    }
  }
  getPlans={
    [MockFunction] {
      "calls": Array [
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
        Array [],
      ],
    }
  }
  instances={
    Object {
      "isFetching": false,
      "list": Array [
        Object {
          "metadata": Object {
            "creationTimestamp": "",
            "finalizers": Array [],
            "generation": 1,
            "name": "my-instance",
            "namespace": "default",
            "resourceVersion": "",
            "selfLink": "",
            "uid": "",
          },
          "spec": Object {
            "clusterServiceClassExternalName": "my-instance",
            "clusterServiceClassRef": Object {
              "name": "my-instance",
            },
            "clusterServicePlanExternalName": "my-instance",
            "clusterServicePlanRef": Object {
              "name": "my-instance",
            },
            "externalID": "my-instance",
          },
          "status": Object {
            "conditions": Array [
              Object {
                "lastTransitionTime": "1",
                "message": "everything okay here",
                "reason": "none",
                "status": "good",
                "type": "a type",
              },
            ],
          },
        },
      ],
    }
  }
  name="my-instance"
  namespace="default"
  plans={
    Object {
      "isFetching": false,
      "list": Array [],
    }
  }
  removeBinding={[MockFunction]}
>
  <div
    className="container"
  >
    <PageHeader>
      <header
        className="PageHeader"
      >
        <div
          className="row padding-t-big padding-b-small collapse-b-phone-land align-center"
        >
          <h1>
            my-instance
          </h1>
        </div>
      </header>
    </PageHeader>
    <main>
      <LoadingWrapper
        loaded={true}
      >
        <div
          className="found"
        >
          <h2>
            About
          </h2>
          <div>
            <div>
              <div>
                <h3>
                  Status
                </h3>
                <table>
                  <thead>
                    <tr>
                      <th>
                        Type
                      </th>
                      <th>
                        Status
                      </th>
                      <th>
                        Last Transition Time
                      </th>
                      <th>
                        Reason
                      </th>
                      <th>
                        Message
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr
                      key="1"
                    >
                      <td>
                        a type
                      </td>
                      <td>
                        good
                      </td>
                      <td>
                        1
                      </td>
                      <td>
                        <code>
                          none
                        </code>
                      </td>
                      <td>
                        everything okay here
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
          <DeprovisionButton
            deprovision={[MockFunction]}
            instance={
              Object {
                "metadata": Object {
                  "creationTimestamp": "",
                  "finalizers": Array [],
                  "generation": 1,
                  "name": "my-instance",
                  "namespace": "default",
                  "resourceVersion": "",
                  "selfLink": "",
                  "uid": "",
                },
                "spec": Object {
                  "clusterServiceClassExternalName": "my-instance",
                  "clusterServiceClassRef": Object {
                    "name": "my-instance",
                  },
                  "clusterServicePlanExternalName": "my-instance",
                  "clusterServicePlanRef": Object {
                    "name": "my-instance",
                  },
                  "externalID": "my-instance",
                },
                "status": Object {
                  "conditions": Array [
                    Object {
                      "lastTransitionTime": "1",
                      "message": "everything okay here",
                      "reason": "none",
                      "status": "good",
                      "type": "a type",
                    },
                  ],
                },
              }
            }
          >
            <div
              className="DeprovisionButton"
            >
              <ConfirmDialog
                closeModal={[Function]}
                loading={false}
                modalIsOpen={false}
                onConfirm={[Function]}
              >
                <div
                  className="ConfirmDialog"
                >
                  <Modal
                    ariaHideApp={true}
                    bodyOpenClassName="ReactModal__Body--open"
                    closeTimeoutMS={0}
                    contentLabel="Modal"
                    isOpen={false}
                    onRequestClose={[Function]}
                    parentSelector={[Function]}
                    portalClassName="ReactModalPortal"
                    shouldCloseOnEsc={true}
                    shouldCloseOnOverlayClick={true}
                    shouldFocusAfterRender={true}
                    shouldReturnFocusAfterClose={true}
                    style={
                      Object {
                        "content": Object {
                          "bottom": "auto",
                          "left": "50%",
                          "marginRight": "-50%",
                          "right": "auto",
                          "top": "50%",
                          "transform": "translate(-50%, -50%)",
                        },
                      }
                    }
                  >
                    <Portal
                      containerInfo={
                        <div
                          class="ReactModalPortal"
                        />
                      }
                    >
                      <ModalPortal
                        ariaHideApp={true}
                        bodyOpenClassName="ReactModal__Body--open"
                        closeTimeoutMS={0}
                        contentLabel="Modal"
                        defaultStyles={
                          Object {
                            "content": Object {
                              "WebkitOverflowScrolling": "touch",
                              "background": "#fff",
                              "border": "1px solid #ccc",
                              "borderRadius": "4px",
                              "bottom": "40px",
                              "left": "40px",
                              "outline": "none",
                              "overflow": "auto",
                              "padding": "20px",
                              "position": "absolute",
                              "right": "40px",
                              "top": "40px",
                            },
                            "overlay": Object {
                              "backgroundColor": "rgba(255, 255, 255, 0.75)",
                              "bottom": 0,
                              "left": 0,
                              "position": "fixed",
                              "right": 0,
                              "top": 0,
                            },
                          }
                        }
                        isOpen={false}
                        onRequestClose={[Function]}
                        parentSelector={[Function]}
                        portalClassName="ReactModalPortal"
                        shouldCloseOnEsc={true}
                        shouldCloseOnOverlayClick={true}
                        shouldFocusAfterRender={true}
                        shouldReturnFocusAfterClose={true}
                        style={
                          Object {
                            "content": Object {
                              "bottom": "auto",
                              "left": "50%",
                              "marginRight": "-50%",
                              "right": "auto",
                              "top": "50%",
                              "transform": "translate(-50%, -50%)",
                            },
                          }
                        }
                      />
                    </Portal>
                  </Modal>
                </div>
              </ConfirmDialog>
              <button
                className="button button-primary button-small button-danger"
                disabled={false}
                onClick={[Function]}
              >
                Deprovision
              </button>
            </div>
          </DeprovisionButton>
          <h3>
            Spec
          </h3>
          <CardGrid>
            <div
              className="CardGrid padding-v-big "
            >
              <span />
              <span />
            </div>
          </CardGrid>
          <h2>
            Bindings
          </h2>
          <AddBindingButton
            addBinding={[MockFunction]}
            instanceRefName="my-instance"
            namespace="default"
            onAddBinding={[Function]}
          >
            <div
              className="AddBindingButton"
            >
              <button
                className="button button-primary"
                onClick={[Function]}
              >
                Add Binding
              </button>
              <Modal
                ariaHideApp={true}
                bodyOpenClassName="ReactModal__Body--open"
                closeTimeoutMS={0}
                isOpen={false}
                onRequestClose={[Function]}
                parentSelector={[Function]}
                portalClassName="ReactModalPortal"
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                shouldFocusAfterRender={true}
                shouldReturnFocusAfterClose={true}
              >
                <Portal
                  containerInfo={
                    <div
                      class="ReactModalPortal"
                    />
                  }
                >
                  <ModalPortal
                    ariaHideApp={true}
                    bodyOpenClassName="ReactModal__Body--open"
                    closeTimeoutMS={0}
                    defaultStyles={
                      Object {
                        "content": Object {
                          "WebkitOverflowScrolling": "touch",
                          "background": "#fff",
                          "border": "1px solid #ccc",
                          "borderRadius": "4px",
                          "bottom": "40px",
                          "left": "40px",
                          "outline": "none",
                          "overflow": "auto",
                          "padding": "20px",
                          "position": "absolute",
                          "right": "40px",
                          "top": "40px",
                        },
                        "overlay": Object {
                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                          "bottom": 0,
                          "left": 0,
                          "position": "fixed",
                          "right": 0,
                          "top": 0,
                        },
                      }
                    }
                    isOpen={false}
                    onRequestClose={[Function]}
                    parentSelector={[Function]}
                    portalClassName="ReactModalPortal"
                    shouldCloseOnEsc={true}
                    shouldCloseOnOverlayClick={true}
                    shouldFocusAfterRender={true}
                    shouldReturnFocusAfterClose={true}
                    style={
                      Object {
                        "content": Object {},
                        "overlay": Object {},
                      }
                    }
                  />
                </Portal>
              </Modal>
            </div>
          </AddBindingButton>
          <br />
          <BindingList
            bindingsWithSecrets={
              Array [
                Object {
                  "binding": Object {
                    "metadata": Object {
                      "name": "my-instance",
                      "namespace": "default",
                      "uid": "binding-my-instance",
                    },
                    "spec": Object {
                      "instanceRef": Object {
                        "name": "my-instance",
                      },
                    },
                    "status": Object {
                      "conditions": Array [
                        Object {
                          "message": "binding is okay",
                        },
                      ],
                    },
                  },
                },
              ]
            }
            removeBinding={[MockFunction]}
          >
            <div
              className="BindingList"
            >
              <table>
                <thead>
                  <tr>
                    <th>
                      Binding
                    </th>
                    <th>
                      Status
                    </th>
                    <th>
                      Message
                    </th>
                    <th>
                      Secret
                    </th>
                    <th />
                  </tr>
                </thead>
                <tbody>
                  <BindingListEntry
                    bindingWithSecret={
                      Object {
                        "binding": Object {
                          "metadata": Object {
                            "name": "my-instance",
                            "namespace": "default",
                            "uid": "binding-my-instance",
                          },
                          "spec": Object {
                            "instanceRef": Object {
                              "name": "my-instance",
                            },
                          },
                          "status": Object {
                            "conditions": Array [
                              Object {
                                "message": "binding is okay",
                              },
                            ],
                          },
                        },
                      }
                    }
                    key="binding-my-instance"
                    removeBinding={[MockFunction]}
                  >
                    <tr>
                      <td>
                        my-instance
                      </td>
                      <td>
                        <code />
                      </td>
                      <td>
                        <button
                          className="button button-small"
                          onClick={[Function]}
                        >
                          Show message
                        </button>
                        <TerminalModal
                          closeModal={[Function]}
                          message="binding is okay"
                          modalIsOpen={false}
                          title="Status Message"
                        >
                          <div
                            className="MessageDetails"
                          >
                            <Modal
                              ariaHideApp={true}
                              bodyOpenClassName="ReactModal__Body--open"
                              className="Terminal"
                              closeTimeoutMS={0}
                              contentLabel="Modal"
                              isOpen={false}
                              onRequestClose={[Function]}
                              parentSelector={[Function]}
                              portalClassName="ReactModalPortal"
                              shouldCloseOnEsc={true}
                              shouldCloseOnOverlayClick={true}
                              shouldFocusAfterRender={true}
                              shouldReturnFocusAfterClose={true}
                              style={
                                Object {
                                  "content": Object {
                                    "maxWidth": "80%",
                                  },
                                  "overlay": Object {
                                    "alignItems": "center",
                                    "display": "flex",
                                    "justifyContent": "center",
                                  },
                                }
                              }
                            >
                              <Portal
                                containerInfo={
                                  <div
                                    class="ReactModalPortal"
                                  />
                                }
                              >
                                <ModalPortal
                                  ariaHideApp={true}
                                  bodyOpenClassName="ReactModal__Body--open"
                                  className="Terminal"
                                  closeTimeoutMS={0}
                                  contentLabel="Modal"
                                  defaultStyles={
                                    Object {
                                      "content": Object {
                                        "WebkitOverflowScrolling": "touch",
                                        "background": "#fff",
                                        "border": "1px solid #ccc",
                                        "borderRadius": "4px",
                                        "bottom": "40px",
                                        "left": "40px",
                                        "outline": "none",
                                        "overflow": "auto",
                                        "padding": "20px",
                                        "position": "absolute",
                                        "right": "40px",
                                        "top": "40px",
                                      },
                                      "overlay": Object {
                                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "fixed",
                                        "right": 0,
                                        "top": 0,
                                      },
                                    }
                                  }
                                  isOpen={false}
                                  onRequestClose={[Function]}
                                  parentSelector={[Function]}
                                  portalClassName="ReactModalPortal"
                                  shouldCloseOnEsc={true}
                                  shouldCloseOnOverlayClick={true}
                                  shouldFocusAfterRender={true}
                                  shouldReturnFocusAfterClose={true}
                                  style={
                                    Object {
                                      "content": Object {
                                        "maxWidth": "80%",
                                      },
                                      "overlay": Object {
                                        "alignItems": "center",
                                        "display": "flex",
                                        "justifyContent": "center",
                                      },
                                    }
                                  }
                                />
                              </Portal>
                            </Modal>
                          </div>
                        </TerminalModal>
                      </td>
                      <td>
                        <BindingDetails
                          binding={
                            Object {
                              "metadata": Object {
                                "name": "my-instance",
                                "namespace": "default",
                                "uid": "binding-my-instance",
                              },
                              "spec": Object {
                                "instanceRef": Object {
                                  "name": "my-instance",
                                },
                              },
                              "status": Object {
                                "conditions": Array [
                                  Object {
                                    "message": "binding is okay",
                                  },
                                ],
                              },
                            }
                          }
                        >
                          <dl
                            className="BindingDetails container margin-normal"
                          >
                            <dt>
                               
                              <a
                                onClick={[Function]}
                              >
                                (show)
                              </a>
                            </dt>
                            <TerminalModal
                              closeModal={[Function]}
                              message="The secret is empty"
                              modalIsOpen={false}
                              title="Secret: undefined"
                            >
                              <div
                                className="MessageDetails"
                              >
                                <Modal
                                  ariaHideApp={true}
                                  bodyOpenClassName="ReactModal__Body--open"
                                  className="Terminal"
                                  closeTimeoutMS={0}
                                  contentLabel="Modal"
                                  isOpen={false}
                                  onRequestClose={[Function]}
                                  parentSelector={[Function]}
                                  portalClassName="ReactModalPortal"
                                  shouldCloseOnEsc={true}
                                  shouldCloseOnOverlayClick={true}
                                  shouldFocusAfterRender={true}
                                  shouldReturnFocusAfterClose={true}
                                  style={
                                    Object {
                                      "content": Object {
                                        "maxWidth": "80%",
                                      },
                                      "overlay": Object {
                                        "alignItems": "center",
                                        "display": "flex",
                                        "justifyContent": "center",
                                      },
                                    }
                                  }
                                >
                                  <Portal
                                    containerInfo={
                                      <div
                                        class="ReactModalPortal"
                                      />
                                    }
                                  >
                                    <ModalPortal
                                      ariaHideApp={true}
                                      bodyOpenClassName="ReactModal__Body--open"
                                      className="Terminal"
                                      closeTimeoutMS={0}
                                      contentLabel="Modal"
                                      defaultStyles={
                                        Object {
                                          "content": Object {
                                            "WebkitOverflowScrolling": "touch",
                                            "background": "#fff",
                                            "border": "1px solid #ccc",
                                            "borderRadius": "4px",
                                            "bottom": "40px",
                                            "left": "40px",
                                            "outline": "none",
                                            "overflow": "auto",
                                            "padding": "20px",
                                            "position": "absolute",
                                            "right": "40px",
                                            "top": "40px",
                                          },
                                          "overlay": Object {
                                            "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                            "bottom": 0,
                                            "left": 0,
                                            "position": "fixed",
                                            "right": 0,
                                            "top": 0,
                                          },
                                        }
                                      }
                                      isOpen={false}
                                      onRequestClose={[Function]}
                                      parentSelector={[Function]}
                                      portalClassName="ReactModalPortal"
                                      shouldCloseOnEsc={true}
                                      shouldCloseOnOverlayClick={true}
                                      shouldFocusAfterRender={true}
                                      shouldReturnFocusAfterClose={true}
                                      style={
                                        Object {
                                          "content": Object {
                                            "maxWidth": "80%",
                                          },
                                          "overlay": Object {
                                            "alignItems": "center",
                                            "display": "flex",
                                            "justifyContent": "center",
                                          },
                                        }
                                      }
                                    />
                                  </Portal>
                                </Modal>
                              </div>
                            </TerminalModal>
                          </dl>
                        </BindingDetails>
                      </td>
                      <td>
                        <RemoveBindingButton
                          bindingWithSecret={
                            Object {
                              "binding": Object {
                                "metadata": Object {
                                  "name": "my-instance",
                                  "namespace": "default",
                                  "uid": "binding-my-instance",
                                },
                                "spec": Object {
                                  "instanceRef": Object {
                                    "name": "my-instance",
                                  },
                                },
                                "status": Object {
                                  "conditions": Array [
                                    Object {
                                      "message": "binding is okay",
                                    },
                                  ],
                                },
                              },
                            }
                          }
                          removeBinding={[MockFunction]}
                        >
                          <div
                            className="RemoveBindingButton"
                          >
                            <button
                              className="button button-small button-danger"
                              onClick={[Function]}
                            >
                              Remove
                            </button>
                          </div>
                        </RemoveBindingButton>
                      </td>
                    </tr>
                  </BindingListEntry>
                </tbody>
              </table>
            </div>
          </BindingList>
        </div>
      </LoadingWrapper>
    </main>
  </div>
</ServiceInstanceView>
`;

exports[`when all the components are loaded when an instance is available should show the instance status info 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={true}
    >
      <div
        className="found"
      >
        <h2>
          About
        </h2>
        <div>
          <div>
            <div>
              <h3>
                Status
              </h3>
              <table>
                <thead>
                  <tr>
                    <th>
                      Type
                    </th>
                    <th>
                      Status
                    </th>
                    <th>
                      Last Transition Time
                    </th>
                    <th>
                      Reason
                    </th>
                    <th>
                      Message
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr
                    key="1"
                  >
                    <td>
                      a type
                    </td>
                    <td>
                      good
                    </td>
                    <td>
                      1
                    </td>
                    <td>
                      <code>
                        none
                      </code>
                    </td>
                    <td>
                      everything okay here
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <DeprovisionButton
          deprovision={[MockFunction]}
          instance={
            Object {
              "metadata": Object {
                "creationTimestamp": "",
                "finalizers": Array [],
                "generation": 1,
                "name": "my-instance",
                "namespace": "default",
                "resourceVersion": "",
                "selfLink": "",
                "uid": "",
              },
              "spec": Object {
                "clusterServiceClassExternalName": "my-instance",
                "clusterServiceClassRef": Object {
                  "name": "my-instance",
                },
                "clusterServicePlanExternalName": "my-instance",
                "clusterServicePlanRef": Object {
                  "name": "my-instance",
                },
                "externalID": "my-instance",
              },
              "status": Object {
                "conditions": Array [
                  Object {
                    "lastTransitionTime": "1",
                    "message": "everything okay here",
                    "reason": "none",
                    "status": "good",
                    "type": "a type",
                  },
                ],
              },
            }
          }
        />
        <h3>
          Spec
        </h3>
        <CardGrid>
          <span />
          <span />
        </CardGrid>
        <h2>
          Bindings
        </h2>
        <AddBindingButton
          addBinding={[MockFunction]}
          instanceRefName="my-instance"
          namespace="default"
          onAddBinding={[Function]}
        />
        <br />
        <BindingList
          bindingsWithSecrets={Array []}
          removeBinding={[MockFunction]}
        />
      </div>
    </LoadingWrapper>
  </main>
</div>
`;

exports[`while fetching components loading spinner matches the snapshot 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={false}
    />
  </main>
</div>
`;

exports[`while fetching components matches the snapshot 1`] = `
<div
  className="container"
>
  <PageHeader>
    <h1>
      my-instance
    </h1>
  </PageHeader>
  <main>
    <LoadingWrapper
      loaded={false}
    />
  </main>
</div>
`;
