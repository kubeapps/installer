syntax = "proto3";
package kubeappsapis.core.packages.v1alpha1;
option go_package = "github.com/kubeapps/kubeapps/cmd/kubeapps-apis/gen/core/packages/v1alpha1";

import "google/api/annotations.proto";
import "kubeappsapis/core/plugins/v1alpha1/plugins.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// The core.packages defines the request and response types for API calls
// interacting with packages, as well as the PackagesService to be implemented.

// Each packages v1alpha1 plugin must implement at least the following rpcs:
//
service PackagesService {
  rpc GetAvailablePackages(kubeappsapis.core.packages.v1alpha1.GetAvailablePackagesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackagesResponse) {
    option (google.api.http) = {
      get: "/core/packages/v1alpha1/packages"
    };
  }
  rpc GetPackageRepositories(kubeappsapis.core.packages.v1alpha1.GetPackageRepositoriesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetPackageRepositoriesResponse) {
    option (google.api.http) = {
      get: "/core/packages/v1alpha1/packagerepositories"
    };
  }
  rpc GetPackageMeta(kubeappsapis.core.packages.v1alpha1.GetPackageMetaRequest) returns (kubeappsapis.core.packages.v1alpha1.GetPackageMetaResponse) {
    option (google.api.http) = {
      get: "/core/packages/v1alpha1/packagemeta"
    };
  }
}
//
// Standard request and response messages for each required function are defined
// below for import and re-use.

// GetAvailablePackages
//
// Request for GetAvailablePackages
message GetAvailablePackagesRequest {
  // A cluster name can be provided if multiple clusters are configured,
  // otherwise the current cluster will be assumed.
  string cluster = 1;

  // A namespace can be provided if the packages available for install in a
  // specific namespace are required.
  string namespace = 2;

  // TODO: Add standard filters.
}

// AvailablePackage
// 
// An AvailablePackage defines a package available for installation.
message AvailablePackage {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: '{"name": "app1.example.com", "version": "9.10.09", "iconUrl": ""}'
  };

  // Available package name
  //
  // The fully qualified name of the package.
  string name = 1;

  // Available package version
  //
  // The version of the package in the repository.
  string version = 2;

  // Available package icon
  //
  // A url for an icon.
  string icon_url = 3;
  
  // PackageRepositoryReference
  //
  // A PackageRepository is identified by a fully qualified name and
  // optionally a specific namespace.
  message PackageRepositoryReference {
    // Package repository name
    //
    // The fully qualified name of the package repository.
    string name = 1;

    // Package repository namespace
    //
    // An optional namespace for namespaced package repositories.
    string namespace = 2;
  }
  // Package repository reference
  //
  // An optional package repository reference where this package is located. Not
  // all plugins may support this back reference (eg. kapp-controller)
  PackageRepositoryReference repository = 4;

  // Package repository plugin
  //
  // The plugin used to interact with this package repository.
  kubeappsapis.core.plugins.v1alpha1.Plugin plugin = 5;
}

// GetAvailablePackages
//
// Response for GetAvailablePackages
message GetAvailablePackagesResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: '{"packages": [{"name": "app1.example.com", "version": "9.10.09", "iconUrl": ""}]}'
  };
  // List of AvailablePackage
  repeated AvailablePackage packages = 1;
}

// GetPackageRepositories
//
// Request for GetPackageRepositories
message GetPackageRepositoriesRequest {
  // A cluster name can be provided if multiple clusters are configured,
  // otherwise the current cluster will be assumed.
  string cluster = 1;

  // A namespace can be provided if the package repositories for a specific namespace
  // are requested, when supported by the packaging format.
  string namespace = 2;

  // TODO: Add standard filters. Potentially filter by plugin.
}

// PackageRepository
//
// A PackageRepository defines a repository of packages for installation.
message PackageRepository {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: '{"name": "repo-name.example.com", "namespace": "", "url": "foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5"}'
  };

  // Package repository name
  //
  // The name identifying package repository on the cluster.
  string name = 1;
  
  // Package repository namespace
  //
  // An optional namespace for namespaced package repositories.
  string namespace = 2;
  
  // Package repository URL
  //
  // A url identifying the package repository location.
  string url = 3;

  // Package repository plugin
  //
  // The plugin used to interact with this package repository.
  kubeappsapis.core.plugins.v1alpha1.Plugin plugin = 4;

  // TODO: Other fields such as type, status... TBD.
}

// GetPackageRepositories
//
// Response for GetPackageRepositories
message GetPackageRepositoriesResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: '{"repositories": [{"name": "repo-name.example.com", "namespace": "", "url": "foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5"}]}'
  };
  // Repositories
  //
  // List of PackageRepository
  repeated PackageRepository repositories = 1;
}

message PackageReference {
  // required package name should be unique within the scope of specified repository, if specified
  string name = 1; 

  // A PackageRepository is identified by a fully qualified name and
  // optionally a specific namespace.
  message PackageRepositoryReference {
    string name = 1;
    string namespace = 2;
  }
  // An optional package repository reference where this package is located. Not
  // all plugins may support this back reference (eg. kapp-controller)
  PackageRepositoryReference repository = 2;
}

//
// Request for GetPackageMeta
message GetPackageMetaRequest {
  PackageReference package = 1;
}

//
// Response for GetPackageMeta
message GetPackageMetaResponse {
  message PackageMeta {
    string readme = 1;
  }
  PackageMeta meta = 1;
}