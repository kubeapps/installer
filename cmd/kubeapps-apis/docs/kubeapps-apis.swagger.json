{
  "swagger": "2.0",
  "info": {
    "title": "Kubeapps API",
    "description": "[![CircleCI](https://circleci.com/gh/kubeapps/kubeapps/tree/master.svg?style=svg)](https://circleci.com/gh/kubeapps/kubeapps/tree/master)\n \n [Kubeapps](https://github.com/kubeapps/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.\n \n Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/kubeapps/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.\n #### Developer Documentation\n - The [Kubeapps architecture overview](https://github.com/kubeapps/kubeapps/blob/master/docs/architecture/overview.md).\n - The [Kubeapps Developer Documentation](https://github.com/kubeapps/kubeapps/blob/master/docs/developer/README.md) for instructions on setting up the developer environment for developing on Kubeapps and its components.\n - The [Kubeapps Build Guide](https://github.com/kubeapps/kubeapps/blob/master/docs/developer/build.md) for instructions on setting up the build environment and building Kubeapps from source.\n",
    "termsOfService": "https://github.com/kubeapps/kubeapps/blob/master/LICENSE",
    "version": "0.1.0",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "PluginsService"
    },
    {
      "name": "PackagesService"
    },
    {
      "name": "FluxV2PackagesService"
    },
    {
      "name": "KappControllerPackagesService"
    }
  ],
  "host": "127.0.0.1:8080",
  "basePath": "/apis",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/core/packages/v1alpha1/availablepackagedetails": {
      "get": {
        "operationId": "PackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier. The fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique. \nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/availablepackagesummaries": {
      "get": {
        "operationId": "PackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/plugins/v1alpha1/configured-plugins": {
      "get": {
        "summary": "GetConfiguredPlugins returns a map of short and longnames for the configured plugins.",
        "operationId": "PluginsService_GetConfiguredPlugins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetConfiguredPluginsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "PluginsService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/availablepackagedetails": {
      "get": {
        "summary": "GetAvailablePackageDetail returns the package metadata managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier. The fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique. \nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/availablepackagesummaries": {
      "get": {
        "summary": "GetAvailablePackageSummaries returns the available packages managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/packagerepositories": {
      "get": {
        "summary": "GetPackageRepositories returns the repositories managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetPackageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pluginsfluxv2packagesv1alpha1GetPackageRepositoriesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/availablepackagedetails": {
      "get": {
        "summary": "GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier. The fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique. \nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/availablepackagesummaries": {
      "get": {
        "summary": "GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/packagerepositories": {
      "get": {
        "summary": "GetPackageRepositories returns the repositories managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetPackageRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pluginskapp_controllerpackagesv1alpha1GetPackageRepositoriesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace can be provided if the packaging system allows namespaced packages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    }
  },
  "definitions": {
    "pluginsfluxv2packagesv1alpha1GetPackageRepositoriesResponse": {
      "type": "object",
      "example": {
        "repositories": [
          {
            "name": "repo-name.example.com",
            "namespace": "",
            "url": "foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5"
          }
        ]
      },
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pluginsfluxv2packagesv1alpha1PackageRepository"
          },
          "description": "List of PackageRepository",
          "title": "Repositories"
        }
      },
      "description": "Response for GetPackageRepositories",
      "title": "GetPackageRepositories"
    },
    "pluginsfluxv2packagesv1alpha1PackageRepository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name identifying package repository on the cluster.",
          "title": "Package repository name"
        },
        "namespace": {
          "type": "string",
          "description": "An optional namespace for namespaced package repositories.",
          "title": "Package repository namespace"
        },
        "url": {
          "type": "string",
          "description": "A url identifying the package repository location.",
          "title": "Package repository URL"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this package repository.",
          "title": "Package repository plugin"
        }
      },
      "description": "A PackageRepository defines a repository of packages for installation.",
      "title": "PackageRepository"
    },
    "pluginskapp_controllerpackagesv1alpha1GetPackageRepositoriesResponse": {
      "type": "object",
      "example": {
        "repositories": [
          {
            "name": "repo-name.example.com",
            "namespace": "",
            "url": "foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5"
          }
        ]
      },
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pluginskapp_controllerpackagesv1alpha1PackageRepository"
          },
          "description": "List of PackageRepository",
          "title": "Repositories"
        }
      },
      "description": "Response for GetPackageRepositories",
      "title": "GetPackageRepositories"
    },
    "pluginskapp_controllerpackagesv1alpha1PackageRepository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name identifying package repository on the cluster.",
          "title": "Package repository name"
        },
        "namespace": {
          "type": "string",
          "description": "An optional namespace for namespaced package repositories.",
          "title": "Package repository namespace"
        },
        "url": {
          "type": "string",
          "description": "A url identifying the package repository location.",
          "title": "Package repository URL"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this package repository.",
          "title": "Package repository plugin"
        }
      },
      "description": "A PackageRepository defines a repository of packages for installation.",
      "title": "PackageRepository"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1AvailablePackageDetail": {
      "type": "object",
      "properties": {
        "packageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference uniquely identifying the package.",
          "title": "Available package reference"
        },
        "name": {
          "type": "string",
          "description": "The name of the available package",
          "title": "Available package name"
        },
        "version": {
          "type": "string",
          "description": "TODO: add description",
          "title": "Available package version"
        },
        "iconUrl": {
          "type": "string",
          "description": "A url for an icon.",
          "title": "Available package icon URL"
        },
        "displayName": {
          "type": "string",
          "description": "A name as displayed to users",
          "title": "Available package display name"
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the app provided by the package",
          "title": "Available package short description"
        },
        "longDescription": {
          "type": "string",
          "description": "A long description of the package, such as a README formatted with Markdown.",
          "title": "Available package long description"
        },
        "defaultValues": {
          "type": "string",
          "description": "An example of default values used during package templating that can serve\nas documentation or a starting point for user customization.",
          "title": "Available package default values"
        },
        "valuesSchema": {
          "type": "string",
          "description": "An optional openapi/json schema that can be used to validate a user-provided values.",
          "title": "Available package values schema"
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Maintainer"
          },
          "description": "List of Maintainer",
          "title": "Available package maintainers"
        },
        "opaqueData": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "A plugin can define further key-values for data which does not (yet) fit\nwith the core.packaging.AvailablePackageDetail.",
          "title": "Available package opaque data"
        }
      },
      "description": "An AvailablePackageDetail provides additional details required when\ninspecting an individual package.",
      "title": "AvailablePackageDetail"
    },
    "v1alpha1AvailablePackageReference": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The context (cluster/namespace) for the package.",
          "title": "Available package context"
        },
        "identifier": {
          "type": "string",
          "description": "The fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique. \nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
          "title": "Available package identifier"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this available package.\nThis field should be omitted when the request is in the context of a specific plugin.",
          "title": "Plugin for the available package"
        }
      },
      "description": "An AvailablePackageReference has the minimum information required to uniquely\nidentify an available package. This is re-used on the summary and details of an\navailable package.",
      "title": "AvailablePackageReference"
    },
    "v1alpha1AvailablePackageSummary": {
      "type": "object",
      "properties": {
        "availablePackageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference uniquely identifying the package.",
          "title": "Available package reference"
        },
        "name": {
          "type": "string",
          "description": "The name of the available package",
          "title": "Available package name"
        },
        "latestVersion": {
          "type": "string",
          "description": "The latest version available for this package. Often expected when viewing\na summary of many available packages.",
          "title": "Latest available package version"
        },
        "iconUrl": {
          "type": "string",
          "description": "A url for an icon.",
          "title": "Available package Icon URL"
        },
        "displayName": {
          "type": "string",
          "description": "A name as displayed to users",
          "title": "Available package display name"
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the app provided by the package",
          "title": "Available package short description"
        }
      },
      "description": "An AvailablePackageSummary provides a summary of a package available for installation\nuseful when aggregating many available packages.",
      "title": "AvailablePackageSummary"
    },
    "v1alpha1Context": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "description": "A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
          "title": "Cluster"
        },
        "namespace": {
          "type": "string",
          "description": "A namespace can be provided if the packaging system allows namespaced packages.",
          "title": "Namespace"
        }
      },
      "description": "A Context specifies the context of the message",
      "title": "Context"
    },
    "v1alpha1GetAvailablePackageDetailResponse": {
      "type": "object",
      "properties": {
        "availablePackageDetail": {
          "$ref": "#/definitions/v1alpha1AvailablePackageDetail",
          "description": "List of AvailablePackageDetail",
          "title": "Available package detail"
        }
      },
      "description": "Response for GetAvailablePackageDetail",
      "title": "GetAvailablePackageDetailResponse"
    },
    "v1alpha1GetAvailablePackageSummariesResponse": {
      "type": "object",
      "properties": {
        "availablePackagesSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1AvailablePackageSummary"
          },
          "description": "List of AvailablePackageSummary",
          "title": "Available packages summaries"
        }
      },
      "description": "Response for GetAvailablePackageSummaries",
      "title": "GetAvailablePackageSummariesResponse"
    },
    "v1alpha1GetConfiguredPluginsResponse": {
      "type": "object",
      "example": {
        "plugins": [
          {
            "name": "kapp_controller.packages",
            "version": "v1alpha1"
          }
        ]
      },
      "properties": {
        "plugins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Plugin"
          },
          "description": "List of Plugin",
          "title": "Plugins"
        }
      },
      "description": "Response for GetConfiguredPlugins",
      "title": "GetConfiguredPluginsResponse"
    },
    "v1alpha1Maintainer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A maintainer name",
          "title": "Maintainer name"
        },
        "email": {
          "type": "string",
          "description": "A maintainer email",
          "title": "Maintainer email"
        }
      },
      "description": "Maintainers for the package.",
      "title": "Maintainer"
    },
    "v1alpha1Plugin": {
      "type": "object",
      "example": {
        "name": "kapp_controller.packages",
        "version": "v1alpha1"
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
          "title": "Plugin name"
        },
        "version": {
          "type": "string",
          "description": "The version of the plugin, such as v1alpha1",
          "title": "Plugin version"
        }
      },
      "description": "A plugin can implement multiple services and multiple versions of a service.",
      "title": "Plugin"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "externalDocs": {
    "description": "Kuebapps GitHub repository",
    "url": "https://github.com/kubeapps/kubeapps"
  }
}
